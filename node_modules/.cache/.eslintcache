[{"/Users/u21430/escola/src/index.js":"1","/Users/u21430/escola/src/App.js":"2","/Users/u21430/escola/src/components/template/Logo.js":"3","/Users/u21430/escola/src/components/template/Menu.js":"4","/Users/u21430/escola/src/components/template/Main.js":"5","/Users/u21430/escola/src/components/template/Header.js":"6","/Users/u21430/escola/src/components/template/Footer.js":"7","/Users/u21430/escola/src/components/CrudAluno/CrudAluno.js":"8","/Users/u21430/escola/src/Rotas.js":"9","/Users/u21430/escola/src/components/CrudCurso/CrudCurso.js":"10"},{"size":468,"mtime":1660585565946,"results":"11","hashOfConfig":"12"},{"size":429,"mtime":1660765016149,"results":"13","hashOfConfig":"12"},{"size":286,"mtime":1660760248605,"results":"14","hashOfConfig":"12"},{"size":347,"mtime":1660765167071,"results":"15","hashOfConfig":"12"},{"size":358,"mtime":1660764862599,"results":"16","hashOfConfig":"12"},{"size":196,"mtime":1660761916511,"results":"17","hashOfConfig":"12"},{"size":213,"mtime":1660759295451,"results":"18","hashOfConfig":"12"},{"size":4836,"mtime":1663781716758,"results":"19","hashOfConfig":"12"},{"size":1128,"mtime":1664471879182,"results":"20","hashOfConfig":"12"},{"size":4732,"mtime":1664572050583,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hadf6s",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/Users/u21430/escola/src/index.js",[],[],"/Users/u21430/escola/src/App.js",[],[],"/Users/u21430/escola/src/components/template/Logo.js",[],[],"/Users/u21430/escola/src/components/template/Menu.js",[],[],"/Users/u21430/escola/src/components/template/Main.js",[],[],"/Users/u21430/escola/src/components/template/Header.js",[],[],"/Users/u21430/escola/src/components/template/Footer.js",[],[],"/Users/u21430/escola/src/components/CrudAluno/CrudAluno.js",[],[],"/Users/u21430/escola/src/Rotas.js",[],[],"/Users/u21430/escola/src/components/CrudCurso/CrudCurso.js",["53"],[],"\nimport axios from 'axios';\nimport './CrudCurso.css';\nimport Main from '../template/Main';\nimport { useEffect, useState } from 'react';\n\n\nconst title =\"Cadastro de Curso\";\n\nconst urlAPI =\"http://localhost:5278/api/Curso\";\n\nconst initialState={\n    curso:{id:0, nomeCurso:'',codCurso:0,periodo:''},\n    lista:[]\n}\n\nexport default function CrudCurso(){\n\nconst[curso ,setCurso] = useState(initialState.curso);\nconst[lista , setLista] = useState(initialState.lista);\n\nuseEffect(()=>{\n    axios(urlAPI).then(resp =>{\n        setLista({lista: resp.data})\n    })\n},  [curso])\n   function limpar(){\n        setCurso({curso : initialState.curso});\n       }\n\n      function salvar(){\n        const curso = setCurso.curso;\n        curso.codCurso = Number(curso.codCurso);\n        const metodo = curso.id? 'put':'post';\n        const url = curso.id ? `${urlAPI}/${curso.id}`: urlAPI;\n     \n        axios[metodo](url,curso)\n        .then(resp =>{\n            const lista = getListaAtualizada(resp.data)\n          setCurso({curso:initialState.curso,lista})\n        })     \n    }\n function   getListaAtualizada(curso, add = true){\n        const lista = setLista.lista.filter(a => a.id !== curso.id);\n        if(add) lista.unshift(curso);\n        return lista;\n       }\n\n\n    function   atualizaCampo(evento){\n        const curso  = {...setCurso.curso};\n    \n        curso[evento.target.name]= evento.target.value;\n    \n        setCurso({curso});\n       }\n\n\n     function  carregar(curso) {\n        setCurso({curso})\n           const url = urlAPI + \"/\" + curso.id;\n           if (window.confirm(\"Confirma alteração curso: \" + curso.codCurso)) {\n           console.log(\"entrou no confirm\");\n           axios['PUT'](url, curso)\n           .then(resp => {\n           const lista = getListaAtualizada(curso, false)\n           setCurso({ curso: initialState.curso, lista })\n       })\n    \n    }\n    atualizaCampo(curso);\n    }\n function remover(curso){\n    const url = urlAPI + \"/\"+ curso.id;\n    if(window.confirm(\"Confirma remoção do curso:\" + curso.nomeCurso)){\n        console.log(\"entrou no confirm\");\n\n        axios['delete'](url,curso)\n        .then(resp =>{\n            const lista = getListaAtualizada(curso,false)\n            setCurso({curso:initialState.curso,lista})\n        })\n    }\n  }\n   const renderForm = () =>{\n    return(\n        <div  className=\"inclui-container\">\n          <label> Nome: </label>\n          <input\n           type =\"text\"\n           id=\"nome\"\n            placeholder =\"Nome do Curso\"\n            className =\"form-input\"\n            name = \"nome\"\n            value={setCurso.curso.nomeCurso}\n            onChange={e =>atualizaCampo(e)}              \n            />\n\n           <label>Periodo:</label>\n           <input\n            type=\"text\"\n            id = \"periodo\"\n            placeholder=\"Periodo do curso\"\n            className=\"form-input\"\n            name=\"periodo\" \n            value={setCurso.curso.periodo}\n            onChange={e => atualizaCampo(e)}\n           />\n           <label>Código do Curso</label>\n           <input\n             type= \"number\"\n             id=\"codCurso\"\n             placeholder=\"0\"\n             className=\"form-input\"\n             name=\"codCurso\"\n             value={setCurso.curso.codCurso}\n             onChange={e => atualizaCampo(e)}\n             />\n            <button className=\"btnSalvar\"\n            onClick={e => salvar(e)}\n            >Salvar \n            </button>\n            <button className=\"btnCancelar\"\n            onClick={e => limpar(e)}>\n                Cancelar\n            </button>\n             </div>\n    )\n}\nconst renderTable =()  =>{\n    return(\n<div className=\"listagem\">\n   <table className=\"listaCurso\"id =\"tblListaCursos\">\n       <thead>\n           <tr className=\"cabecTabela\">\n      <th className=\"tabTituloNome\">Nome</th>\n      <th className=\"tabTituloPeriodo\">periodo</th>\n      <th className=\"tabTituloCurso\">Codigo Curso</th>                  \n           </tr>\n       </thead>\n       <tbody>\n         {setLista.lista.map(\n             (curso) =>\n             <tr key={curso.id}>\n                 <td>{curso.nome}</td>\n                 <td>{curso.periodo}</td>\n                 <td>{curso.codCurso}</td>\n                  <td>\n                    <button onClick={() => carregar(curso)}>\n                        Alterar\n                    </button>\n                  </td>\n                  <td>\n                    <button onClick={() =>remover(curso)}>\n                        Remover\n                    </button>\n                  </td>\n\n             </tr>\n           )}\n       </tbody>\n     </table> \n    </div>\n    )\n}\n    return(\n    <Main title={title}>\n        {renderForm()}\n       {renderTable()}\n        </Main>\n    )\n\n} \n  \n",{"ruleId":"54","severity":1,"message":"55","line":20,"column":7,"nodeType":"56","messageId":"57","endLine":20,"endColumn":12},"no-unused-vars","'lista' is assigned a value but never used.","Identifier","unusedVar"]